{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.0",
    "title": "Swagger Faqstore",
    "description": "A sample API that uses a faqstore as an example to demonstrate features in the OpenAPI 3.0 specification",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "name": "Swagger API Team",
      "email": "apiteam@swagger.io",
      "url": "http://swagger.io"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "servers": [
    {
      "url": "http://localhost/api",
      "description": "The production API server",
      "variables": {
        "port": {
          "enum": [
            "8000",
            "3000"
          ],
          "default": "8000"
        },
        "basePath": {
          "enum": [
            "v1",
            "v2"
          ],
          "default": "v1"
        }
      }
    }
  ],
  "paths": {
    "/data_types": {
      "post": {
        "tags": [
          "Datatypes"
        ],
        "summary": "Create Datatypes",
        "description": "Create Datatypes",
        "operationId": "createDatatypes",
        "requestBody": {
          "description": "Created Datatypes object",
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/DatatypesRequestBody"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DatatypesRequestBody"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/DatatypesRequestBody"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Successful Response of Datatypes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Datatypes"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Datatypes"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Datatypes"
        ],
        "summary": "Get Datatypes List",
        "description": "Get Datatypes List",
        "operationId": "GetDatatypesList",
        "parameters": [
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          },
          {
            "$ref": "#/components/parameters/searchQueryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "The collection Of Datatypes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/Datatypes"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Datatypes"
                }
              }
            }
          },
          "400": {
            "description": "Invalid supplied"
          },
          "default": {
            "description": "Successful Response of Datatypes will be string/json/other format"
          }
        }
      }
    },
    "/data_types/{id}": {
      "get": {
        "tags": [
          "Datatypes"
        ],
        "summary": "Get Datatypes DatatypesId",
        "description": "Get Datatypes DatatypesId",
        "operationId": "getDatatypesById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id that needs to be fetched",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return the single Datatypes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Datatypes"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Datatypes"
                }
              }
            }
          },
          "400": {
            "description": "Invalid supplied"
          },
          "404": {
            "description": "Datatypes not found"
          }
        }
      },
      "put": {
        "tags": [
          "Datatypes"
        ],
        "summary": "Update Datatypes",
        "description": "Update Datatypes",
        "operationId": "updateDatatypes",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id that needs to be update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Update an Existent Datatypes in the Store",
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Datatypes"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Datatypes"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Datatypes"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return the single Datatypes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Datatypes"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Datatypes"
                }
              }
            }
          },
          "400": {
            "description": "Invalid supplied"
          },
          "404": {
            "description": "Datatypes not found"
          },
          "default": {
            "description": "successful operation"
          }
        }
      },
      "delete": {
        "tags": [
          "Datatypes"
        ],
        "summary": "Delete Datatypes",
        "description": "Delete Datatypes",
        "operationId": "deleteDatatypes",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id that needs to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid supplied"
          },
          "404": {
            "description": "Datatypes not found"
          }
        }
      }
    },
    "/data_types2": {
      "post": {
        "tags": [
          "Datatypes2"
        ],
        "summary": "Create Datatypes2",
        "description": "Create Datatypes2",
        "operationId": "createDatatypes2",
        "requestBody": {
          "description": "Created Datatypes2 object",
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Datatypes2RequestBody"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Datatypes2RequestBody"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Datatypes2RequestBody"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Successful Response of Datatypes2",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Datatypes2"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Datatypes2"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Datatypes2"
        ],
        "summary": "Get Datatypes2 List",
        "description": "Get Datatypes2 List",
        "operationId": "GetDatatypes2List",
        "parameters": [
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          },
          {
            "$ref": "#/components/parameters/searchQueryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "The collection Of Datatypes2",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/Datatypes2"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Datatypes2"
                }
              }
            }
          },
          "400": {
            "description": "Invalid supplied"
          },
          "default": {
            "description": "Successful Response of Datatypes2 will be string/json/other format"
          }
        }
      }
    },
    "/data_types2/{id}": {
      "get": {
        "tags": [
          "Datatypes2"
        ],
        "summary": "Get Datatypes2 Datatypes2Id",
        "description": "Get Datatypes2 Datatypes2Id",
        "operationId": "getDatatypes2ById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id that needs to be fetched",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return the single Datatypes2",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Datatypes2"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Datatypes2"
                }
              }
            }
          },
          "400": {
            "description": "Invalid supplied"
          },
          "404": {
            "description": "Datatypes2 not found"
          }
        }
      },
      "put": {
        "tags": [
          "Datatypes2"
        ],
        "summary": "Update Datatypes2",
        "description": "Update Datatypes2",
        "operationId": "updateDatatypes2",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id that needs to be update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Update an Existent Datatypes2 in the Store",
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Datatypes2"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Datatypes2"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Datatypes2"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return the single Datatypes2",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Datatypes2"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Datatypes2"
                }
              }
            }
          },
          "400": {
            "description": "Invalid supplied"
          },
          "404": {
            "description": "Datatypes2 not found"
          },
          "default": {
            "description": "successful operation"
          }
        }
      },
      "delete": {
        "tags": [
          "Datatypes2"
        ],
        "summary": "Delete Datatypes2",
        "description": "Delete Datatypes2",
        "operationId": "deleteDatatypes2",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id that needs to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid supplied"
          },
          "404": {
            "description": "Datatypes2 not found"
          }
        }
      }
    },
    "/data_types56": {
      "post": {
        "tags": [
          "Datatypes56"
        ],
        "summary": "Create Datatypes56",
        "description": "Create Datatypes56",
        "operationId": "createDatatypes56",
        "requestBody": {
          "description": "Created Datatypes56 object",
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Datatypes56RequestBody"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Datatypes56RequestBody"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Datatypes56RequestBody"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Successful Response of Datatypes56",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Datatypes56"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Datatypes56"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Datatypes56"
        ],
        "summary": "Get Datatypes56 List",
        "description": "Get Datatypes56 List",
        "operationId": "GetDatatypes56List",
        "parameters": [
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          },
          {
            "$ref": "#/components/parameters/searchQueryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "The collection Of Datatypes56",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/Datatypes56"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Datatypes56"
                }
              }
            }
          },
          "400": {
            "description": "Invalid supplied"
          },
          "default": {
            "description": "Successful Response of Datatypes56 will be string/json/other format"
          }
        }
      }
    },
    "/data_types56/{id}": {
      "get": {
        "tags": [
          "Datatypes56"
        ],
        "summary": "Get Datatypes56 Datatypes56Id",
        "description": "Get Datatypes56 Datatypes56Id",
        "operationId": "getDatatypes56ById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id that needs to be fetched",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return the single Datatypes56",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Datatypes56"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Datatypes56"
                }
              }
            }
          },
          "400": {
            "description": "Invalid supplied"
          },
          "404": {
            "description": "Datatypes56 not found"
          }
        }
      },
      "put": {
        "tags": [
          "Datatypes56"
        ],
        "summary": "Update Datatypes56",
        "description": "Update Datatypes56",
        "operationId": "updateDatatypes56",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id that needs to be update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Update an Existent Datatypes56 in the Store",
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Datatypes56"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Datatypes56"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Datatypes56"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return the single Datatypes56",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Datatypes56"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Datatypes56"
                }
              }
            }
          },
          "400": {
            "description": "Invalid supplied"
          },
          "404": {
            "description": "Datatypes56 not found"
          },
          "default": {
            "description": "successful operation"
          }
        }
      },
      "delete": {
        "tags": [
          "Datatypes56"
        ],
        "summary": "Delete Datatypes56",
        "description": "Delete Datatypes56",
        "operationId": "deleteDatatypes56",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id that needs to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid supplied"
          },
          "404": {
            "description": "Datatypes56 not found"
          }
        }
      }
    },
    "/mysql_data_types": {
      "post": {
        "tags": [
          "Mysqldatatypes"
        ],
        "summary": "Create Mysqldatatypes",
        "description": "Create Mysqldatatypes",
        "operationId": "createMysqldatatypes",
        "requestBody": {
          "description": "Created Mysqldatatypes object",
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/MysqldatatypesRequestBody"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MysqldatatypesRequestBody"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/MysqldatatypesRequestBody"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Successful Response of Mysqldatatypes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mysqldatatypes"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mysqldatatypes"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Mysqldatatypes"
        ],
        "summary": "Get Mysqldatatypes List",
        "description": "Get Mysqldatatypes List",
        "operationId": "GetMysqldatatypesList",
        "parameters": [
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          },
          {
            "$ref": "#/components/parameters/searchQueryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "The collection Of Mysqldatatypes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/Mysqldatatypes"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mysqldatatypes"
                }
              }
            }
          },
          "400": {
            "description": "Invalid supplied"
          },
          "default": {
            "description": "Successful Response of Mysqldatatypes will be string/json/other format"
          }
        }
      }
    },
    "/mysql_data_types/{id}": {
      "get": {
        "tags": [
          "Mysqldatatypes"
        ],
        "summary": "Get Mysqldatatypes MysqldatatypesId",
        "description": "Get Mysqldatatypes MysqldatatypesId",
        "operationId": "getMysqldatatypesById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id that needs to be fetched",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return the single Mysqldatatypes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mysqldatatypes"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mysqldatatypes"
                }
              }
            }
          },
          "400": {
            "description": "Invalid supplied"
          },
          "404": {
            "description": "Mysqldatatypes not found"
          }
        }
      },
      "put": {
        "tags": [
          "Mysqldatatypes"
        ],
        "summary": "Update Mysqldatatypes",
        "description": "Update Mysqldatatypes",
        "operationId": "updateMysqldatatypes",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id that needs to be update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Update an Existent Mysqldatatypes in the Store",
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Mysqldatatypes"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Mysqldatatypes"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Mysqldatatypes"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return the single Mysqldatatypes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mysqldatatypes"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Mysqldatatypes"
                }
              }
            }
          },
          "400": {
            "description": "Invalid supplied"
          },
          "404": {
            "description": "Mysqldatatypes not found"
          },
          "default": {
            "description": "successful operation"
          }
        }
      },
      "delete": {
        "tags": [
          "Mysqldatatypes"
        ],
        "summary": "Delete Mysqldatatypes",
        "description": "Delete Mysqldatatypes",
        "operationId": "deleteMysqldatatypes",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id that needs to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid supplied"
          },
          "404": {
            "description": "Mysqldatatypes not found"
          }
        }
      }
    },
    "/permissions": {
      "post": {
        "tags": [
          "Permissions"
        ],
        "summary": "Create Permissions",
        "description": "Create Permissions",
        "operationId": "createPermissions",
        "requestBody": {
          "description": "Created Permissions object",
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PermissionsRequestBody"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PermissionsRequestBody"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/PermissionsRequestBody"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Successful Response of Permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Permissions"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Permissions"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Permissions"
        ],
        "summary": "Get Permissions List",
        "description": "Get Permissions List",
        "operationId": "GetPermissionsList",
        "parameters": [
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          },
          {
            "$ref": "#/components/parameters/searchQueryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "The collection Of Permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/Permissions"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Permissions"
                }
              }
            }
          },
          "400": {
            "description": "Invalid supplied"
          },
          "default": {
            "description": "Successful Response of Permissions will be string/json/other format"
          }
        }
      }
    },
    "/permissions/{id}": {
      "get": {
        "tags": [
          "Permissions"
        ],
        "summary": "Get Permissions PermissionsId",
        "description": "Get Permissions PermissionsId",
        "operationId": "getPermissionsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id that needs to be fetched",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return the single Permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Permissions"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Permissions"
                }
              }
            }
          },
          "400": {
            "description": "Invalid supplied"
          },
          "404": {
            "description": "Permissions not found"
          }
        }
      },
      "put": {
        "tags": [
          "Permissions"
        ],
        "summary": "Update Permissions",
        "description": "Update Permissions",
        "operationId": "updatePermissions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id that needs to be update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Update an Existent Permissions in the Store",
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Permissions"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Permissions"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Permissions"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return the single Permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Permissions"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Permissions"
                }
              }
            }
          },
          "400": {
            "description": "Invalid supplied"
          },
          "404": {
            "description": "Permissions not found"
          },
          "default": {
            "description": "successful operation"
          }
        }
      },
      "delete": {
        "tags": [
          "Permissions"
        ],
        "summary": "Delete Permissions",
        "description": "Delete Permissions",
        "operationId": "deletePermissions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id that needs to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid supplied"
          },
          "404": {
            "description": "Permissions not found"
          }
        }
      }
    },
    "/role_permissions": {
      "post": {
        "tags": [
          "Rolepermissions"
        ],
        "summary": "Create Rolepermissions",
        "description": "Create Rolepermissions",
        "operationId": "createRolepermissions",
        "requestBody": {
          "description": "Created Rolepermissions object",
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/RolepermissionsRequestBody"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RolepermissionsRequestBody"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/RolepermissionsRequestBody"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Successful Response of Rolepermissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rolepermissions"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Rolepermissions"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Rolepermissions"
        ],
        "summary": "Get Rolepermissions List",
        "description": "Get Rolepermissions List",
        "operationId": "GetRolepermissionsList",
        "parameters": [
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          },
          {
            "$ref": "#/components/parameters/searchQueryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "The collection Of Rolepermissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/Rolepermissions"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Rolepermissions"
                }
              }
            }
          },
          "400": {
            "description": "Invalid supplied"
          },
          "default": {
            "description": "Successful Response of Rolepermissions will be string/json/other format"
          }
        }
      }
    },
    "/role_permissions/{id}": {
      "get": {
        "tags": [
          "Rolepermissions"
        ],
        "summary": "Get Rolepermissions RolepermissionsId",
        "description": "Get Rolepermissions RolepermissionsId",
        "operationId": "getRolepermissionsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id that needs to be fetched",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return the single Rolepermissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rolepermissions"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Rolepermissions"
                }
              }
            }
          },
          "400": {
            "description": "Invalid supplied"
          },
          "404": {
            "description": "Rolepermissions not found"
          }
        }
      },
      "put": {
        "tags": [
          "Rolepermissions"
        ],
        "summary": "Update Rolepermissions",
        "description": "Update Rolepermissions",
        "operationId": "updateRolepermissions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id that needs to be update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Update an Existent Rolepermissions in the Store",
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Rolepermissions"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Rolepermissions"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Rolepermissions"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return the single Rolepermissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rolepermissions"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Rolepermissions"
                }
              }
            }
          },
          "400": {
            "description": "Invalid supplied"
          },
          "404": {
            "description": "Rolepermissions not found"
          },
          "default": {
            "description": "successful operation"
          }
        }
      },
      "delete": {
        "tags": [
          "Rolepermissions"
        ],
        "summary": "Delete Rolepermissions",
        "description": "Delete Rolepermissions",
        "operationId": "deleteRolepermissions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id that needs to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid supplied"
          },
          "404": {
            "description": "Rolepermissions not found"
          }
        }
      }
    },
    "/roles": {
      "post": {
        "tags": [
          "Roles"
        ],
        "summary": "Create Roles",
        "description": "Create Roles",
        "operationId": "createRoles",
        "requestBody": {
          "description": "Created Roles object",
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/RolesRequestBody"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RolesRequestBody"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/RolesRequestBody"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Successful Response of Roles",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roles"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Roles"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "Get Roles List",
        "description": "Get Roles List",
        "operationId": "GetRolesList",
        "parameters": [
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          },
          {
            "$ref": "#/components/parameters/searchQueryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "The collection Of Roles",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/Roles"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Roles"
                }
              }
            }
          },
          "400": {
            "description": "Invalid supplied"
          },
          "default": {
            "description": "Successful Response of Roles will be string/json/other format"
          }
        }
      }
    },
    "/roles/{id}": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "Get Roles RolesId",
        "description": "Get Roles RolesId",
        "operationId": "getRolesById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id that needs to be fetched",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return the single Roles",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roles"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Roles"
                }
              }
            }
          },
          "400": {
            "description": "Invalid supplied"
          },
          "404": {
            "description": "Roles not found"
          }
        }
      },
      "put": {
        "tags": [
          "Roles"
        ],
        "summary": "Update Roles",
        "description": "Update Roles",
        "operationId": "updateRoles",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id that needs to be update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Update an Existent Roles in the Store",
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Roles"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roles"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Roles"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return the single Roles",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roles"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Roles"
                }
              }
            }
          },
          "400": {
            "description": "Invalid supplied"
          },
          "404": {
            "description": "Roles not found"
          },
          "default": {
            "description": "successful operation"
          }
        }
      },
      "delete": {
        "tags": [
          "Roles"
        ],
        "summary": "Delete Roles",
        "description": "Delete Roles",
        "operationId": "deleteRoles",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id that needs to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid supplied"
          },
          "404": {
            "description": "Roles not found"
          }
        }
      }
    },
    "/schema_types": {
      "post": {
        "tags": [
          "Schematypes"
        ],
        "summary": "Create Schematypes",
        "description": "Create Schematypes",
        "operationId": "createSchematypes",
        "requestBody": {
          "description": "Created Schematypes object",
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/SchematypesRequestBody"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SchematypesRequestBody"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/SchematypesRequestBody"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Successful Response of Schematypes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Schematypes"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Schematypes"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Schematypes"
        ],
        "summary": "Get Schematypes List",
        "description": "Get Schematypes List",
        "operationId": "GetSchematypesList",
        "parameters": [
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          },
          {
            "$ref": "#/components/parameters/searchQueryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "The collection Of Schematypes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/Schematypes"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Schematypes"
                }
              }
            }
          },
          "400": {
            "description": "Invalid supplied"
          },
          "default": {
            "description": "Successful Response of Schematypes will be string/json/other format"
          }
        }
      }
    },
    "/schema_types/{id}": {
      "get": {
        "tags": [
          "Schematypes"
        ],
        "summary": "Get Schematypes SchematypesId",
        "description": "Get Schematypes SchematypesId",
        "operationId": "getSchematypesById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id that needs to be fetched",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return the single Schematypes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Schematypes"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Schematypes"
                }
              }
            }
          },
          "400": {
            "description": "Invalid supplied"
          },
          "404": {
            "description": "Schematypes not found"
          }
        }
      },
      "put": {
        "tags": [
          "Schematypes"
        ],
        "summary": "Update Schematypes",
        "description": "Update Schematypes",
        "operationId": "updateSchematypes",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id that needs to be update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Update an Existent Schematypes in the Store",
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Schematypes"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Schematypes"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Schematypes"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return the single Schematypes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Schematypes"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Schematypes"
                }
              }
            }
          },
          "400": {
            "description": "Invalid supplied"
          },
          "404": {
            "description": "Schematypes not found"
          },
          "default": {
            "description": "successful operation"
          }
        }
      },
      "delete": {
        "tags": [
          "Schematypes"
        ],
        "summary": "Delete Schematypes",
        "description": "Delete Schematypes",
        "operationId": "deleteSchematypes",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id that needs to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid supplied"
          },
          "404": {
            "description": "Schematypes not found"
          }
        }
      }
    },
    "/test": {
      "post": {
        "tags": [
          "Test"
        ],
        "summary": "Create Test",
        "description": "Create Test",
        "operationId": "createTest",
        "requestBody": {
          "description": "Created Test object",
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/TestRequestBody"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestRequestBody"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/TestRequestBody"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Successful Response of Test",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Test"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Test"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Test"
        ],
        "summary": "Get Test List",
        "description": "Get Test List",
        "operationId": "GetTestList",
        "parameters": [
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          },
          {
            "$ref": "#/components/parameters/searchQueryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "The collection Of Test",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/Test"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Test"
                }
              }
            }
          },
          "400": {
            "description": "Invalid supplied"
          },
          "default": {
            "description": "Successful Response of Test will be string/json/other format"
          }
        }
      }
    },
    "/test/{id}": {
      "get": {
        "tags": [
          "Test"
        ],
        "summary": "Get Test TestId",
        "description": "Get Test TestId",
        "operationId": "getTestById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id that needs to be fetched",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return the single Test",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Test"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Test"
                }
              }
            }
          },
          "400": {
            "description": "Invalid supplied"
          },
          "404": {
            "description": "Test not found"
          }
        }
      },
      "put": {
        "tags": [
          "Test"
        ],
        "summary": "Update Test",
        "description": "Update Test",
        "operationId": "updateTest",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id that needs to be update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Update an Existent Test in the Store",
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Test"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Test"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Test"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return the single Test",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Test"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Test"
                }
              }
            }
          },
          "400": {
            "description": "Invalid supplied"
          },
          "404": {
            "description": "Test not found"
          },
          "default": {
            "description": "successful operation"
          }
        }
      },
      "delete": {
        "tags": [
          "Test"
        ],
        "summary": "Delete Test",
        "description": "Delete Test",
        "operationId": "deleteTest",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id that needs to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid supplied"
          },
          "404": {
            "description": "Test not found"
          }
        }
      }
    },
    "/user_roles": {
      "post": {
        "tags": [
          "Userroles"
        ],
        "summary": "Create Userroles",
        "description": "Create Userroles",
        "operationId": "createUserroles",
        "requestBody": {
          "description": "Created Userroles object",
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UserrolesRequestBody"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserrolesRequestBody"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/UserrolesRequestBody"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Successful Response of Userroles",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Userroles"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Userroles"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Userroles"
        ],
        "summary": "Get Userroles List",
        "description": "Get Userroles List",
        "operationId": "GetUserrolesList",
        "parameters": [
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          },
          {
            "$ref": "#/components/parameters/searchQueryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "The collection Of Userroles",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/Userroles"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Userroles"
                }
              }
            }
          },
          "400": {
            "description": "Invalid supplied"
          },
          "default": {
            "description": "Successful Response of Userroles will be string/json/other format"
          }
        }
      }
    },
    "/user_roles/{id}": {
      "get": {
        "tags": [
          "Userroles"
        ],
        "summary": "Get Userroles UserrolesId",
        "description": "Get Userroles UserrolesId",
        "operationId": "getUserrolesById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id that needs to be fetched",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return the single Userroles",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Userroles"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Userroles"
                }
              }
            }
          },
          "400": {
            "description": "Invalid supplied"
          },
          "404": {
            "description": "Userroles not found"
          }
        }
      },
      "put": {
        "tags": [
          "Userroles"
        ],
        "summary": "Update Userroles",
        "description": "Update Userroles",
        "operationId": "updateUserroles",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id that needs to be update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Update an Existent Userroles in the Store",
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Userroles"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Userroles"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Userroles"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return the single Userroles",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Userroles"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Userroles"
                }
              }
            }
          },
          "400": {
            "description": "Invalid supplied"
          },
          "404": {
            "description": "Userroles not found"
          },
          "default": {
            "description": "successful operation"
          }
        }
      },
      "delete": {
        "tags": [
          "Userroles"
        ],
        "summary": "Delete Userroles",
        "description": "Delete Userroles",
        "operationId": "deleteUserroles",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id that needs to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid supplied"
          },
          "404": {
            "description": "Userroles not found"
          }
        }
      }
    },
    "/users": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Create Users",
        "description": "Create Users",
        "operationId": "createUsers",
        "requestBody": {
          "description": "Created Users object",
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UsersRequestBody"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UsersRequestBody"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/UsersRequestBody"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Successful Response of Users",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Users"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get Users List",
        "description": "Get Users List",
        "operationId": "GetUsersList",
        "parameters": [
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          },
          {
            "$ref": "#/components/parameters/searchQueryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "The collection Of Users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/Users"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Users"
                }
              }
            }
          },
          "400": {
            "description": "Invalid supplied"
          },
          "default": {
            "description": "Successful Response of Users will be string/json/other format"
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get Users UsersId",
        "description": "Get Users UsersId",
        "operationId": "getUsersById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id that needs to be fetched",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return the single Users",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Users"
                }
              }
            }
          },
          "400": {
            "description": "Invalid supplied"
          },
          "404": {
            "description": "Users not found"
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update Users",
        "description": "Update Users",
        "operationId": "updateUsers",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id that needs to be update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Update an Existent Users in the Store",
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Users"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Users"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Users"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return the single Users",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Users"
                }
              }
            }
          },
          "400": {
            "description": "Invalid supplied"
          },
          "404": {
            "description": "Users not found"
          },
          "default": {
            "description": "successful operation"
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete Users",
        "description": "Delete Users",
        "operationId": "deleteUsers",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id that needs to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid supplied"
          },
          "404": {
            "description": "Users not found"
          }
        }
      }
    }
  },
  "components": {
    "parameters": {
      "idParam": {
        "name": "id",
        "in": "path",
        "description": "The UserId that needs to be fetched",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "offsetParam": {
        "name": "offset",
        "in": "query",
        "description": "Number of items to skip before returning the results",
        "schema": {
          "type": "integer",
          "format": "int32",
          "minimum": 0,
          "default": 0
        }
      },
      "limitParam": {
        "name": "limit",
        "in": "query",
        "description": "Maximum number of items to return.",
        "schema": {
          "type": "integer",
          "format": "int32",
          "minimum": 10,
          "maximum": 100,
          "default": 10
        }
      },
      "searchQueryParam": {
        "name": "q",
        "in": "query",
        "description": "Search items",
        "schema": {
          "type": "string"
        }
      }
    },
    "schemas": {
      "Datatypes": {
        "description": "Datatypes Table Schema",
        "allOf": [
          {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "$ref": "#/components/schemas/DatatypesRequestBody"
          }
        ]
      },
      "DatatypesRequestBody": {
        "type": "object",
        "required": [],
        "properties": {
          "varchar_column": {
            "type": "string",
            "maxLength": 255
          },
          "char_column": {
            "type": "string",
            "maxLength": 10
          },
          "int_column": {
            "type": "string",
            "maximum": 2147483647,
            "format": "int32"
          },
          "bigint_column": {
            "type": "string",
            "maximum": 9223372036854776000,
            "format": "int64"
          },
          "decimal_column": {
            "type": "string"
          },
          "float_column": {
            "type": "string"
          },
          "double_column": {
            "type": "string"
          },
          "date_column": {
            "type": "string",
            "format": "date"
          },
          "created_at": {
            "type": "string",
            "format": "date"
          },
          "updated_at": {
            "type": "string",
            "format": "date"
          },
          "timestamp_column": {
            "type": "string",
            "format": "date"
          },
          "boolean_column": {
            "type": "string"
          },
          "enum_column": {
            "type": "string",
            "enum": [
              "1",
              "2",
              "3"
            ]
          },
          "text_column": {
            "type": "string"
          },
          "blob_column": {
            "type": "string"
          },
          "json_column": {
            "type": "string"
          },
          "primary_key_column": {
            "type": "string",
            "maximum": 2147483647,
            "format": "int32"
          },
          "unique_column": {
            "type": "string",
            "maxLength": 50
          }
        }
      },
      "Datatypes2": {
        "description": "Datatypes2 Table Schema",
        "allOf": [
          {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "$ref": "#/components/schemas/Datatypes2RequestBody"
          }
        ]
      },
      "Datatypes2RequestBody": {
        "type": "object",
        "required": [],
        "properties": {
          "varchar_column": {
            "type": "string",
            "maxLength": 255
          },
          "char_column": {
            "type": "string",
            "maxLength": 10
          },
          "int_column": {
            "type": "string",
            "maximum": 2147483647,
            "format": "int32"
          },
          "bigint_column": {
            "type": "string",
            "maximum": 9223372036854776000,
            "format": "int64"
          },
          "decimal_column": {
            "type": "string"
          },
          "float_column": {
            "type": "string"
          },
          "double_column": {
            "type": "string"
          },
          "date_column": {
            "type": "string",
            "format": "date"
          },
          "created_at": {
            "type": "string",
            "format": "date"
          },
          "updated_at": {
            "type": "string",
            "format": "date"
          },
          "timestamp_column": {
            "type": "string",
            "format": "date"
          },
          "boolean_column": {
            "type": "string"
          },
          "enum_column": {
            "type": "string",
            "enum": [
              "1",
              "2",
              "3"
            ]
          },
          "text_column": {
            "type": "string"
          },
          "blob_column": {
            "type": "string"
          },
          "json_column": {
            "type": "string"
          },
          "primary_key_column": {
            "type": "string",
            "maximum": 2147483647,
            "format": "int32"
          },
          "unique_column": {
            "type": "string",
            "maxLength": 50
          }
        }
      },
      "Datatypes56": {
        "description": "Datatypes56 Table Schema",
        "allOf": [
          {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "$ref": "#/components/schemas/Datatypes56RequestBody"
          }
        ]
      },
      "Datatypes56RequestBody": {
        "type": "object",
        "required": [],
        "properties": {
          "varchar_column": {
            "type": "string",
            "maxLength": 255
          },
          "char_column": {
            "type": "string",
            "maxLength": 10
          },
          "int_column": {
            "type": "string",
            "maximum": 2147483647,
            "format": "int32"
          },
          "bigint_column": {
            "type": "string",
            "maximum": 9223372036854776000,
            "format": "int64"
          },
          "decimal_column": {
            "type": "string"
          },
          "float_column": {
            "type": "string"
          },
          "double_column": {
            "type": "string"
          },
          "date_column": {
            "type": "string",
            "format": "date"
          },
          "created_at": {
            "type": "string",
            "format": "date"
          },
          "updated_at": {
            "type": "string",
            "format": "date"
          },
          "timestamp_column": {
            "type": "string",
            "format": "date"
          },
          "boolean_column": {
            "type": "string"
          },
          "enum_column": {
            "type": "string",
            "enum": [
              "1",
              "2",
              "3"
            ]
          },
          "text_column": {
            "type": "string"
          },
          "blob_column": {
            "type": "string"
          },
          "json_column": {
            "type": "string"
          },
          "primary_key_column": {
            "type": "string",
            "maximum": 2147483647,
            "format": "int32"
          },
          "unique_column": {
            "type": "string",
            "maxLength": 50
          }
        }
      },
      "Mysqldatatypes": {
        "description": "Mysqldatatypes Table Schema",
        "allOf": [
          {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "$ref": "#/components/schemas/MysqldatatypesRequestBody"
          }
        ]
      },
      "MysqldatatypesRequestBody": {
        "type": "object",
        "required": [
          "uuid_column"
        ],
        "properties": {
          "uuid_column": {
            "type": "string",
            "maxLength": 36
          },
          "int_column": {
            "type": "string",
            "maximum": 2147483647,
            "format": "int32"
          },
          "unsigned_int_column": {
            "type": "string",
            "maximum": 4294967295,
            "format": "int64"
          },
          "tinyint_column": {
            "type": "string",
            "maximum": 127,
            "format": "int32"
          },
          "smallint_column": {
            "type": "string",
            "maximum": 32767,
            "format": "int32"
          },
          "mediumint_column": {
            "type": "string",
            "maximum": 8388607,
            "format": "int32"
          },
          "bigint_column": {
            "type": "string",
            "maximum": 9223372036854776000,
            "format": "int64"
          },
          "float_column": {
            "type": "string"
          },
          "double_column": {
            "type": "string"
          },
          "decimal_column": {
            "type": "string"
          },
          "date_column": {
            "type": "string",
            "format": "date"
          },
          "time_column": {
            "type": "string",
            "format": "date"
          },
          "datetime_column": {
            "type": "string",
            "format": "date"
          },
          "timestamp_column": {
            "type": "string",
            "format": "date"
          },
          "char_column": {
            "type": "string",
            "maxLength": 10
          },
          "varchar_column": {
            "type": "string",
            "maxLength": 255
          },
          "text_column": {
            "type": "string"
          },
          "enum_column": {
            "type": "string",
            "enum": [
              "value1",
              "value2",
              "value3"
            ]
          },
          "binary_column": {
            "type": "string"
          },
          "varbinary_column": {
            "type": "string"
          },
          "blob_column": {
            "type": "string"
          },
          "bit_column": {
            "type": "string"
          },
          "geometry_column": {
            "type": "string"
          },
          "point_column": {
            "type": "string",
            "maximum": 2147483647,
            "format": "int32"
          },
          "json_column": {
            "type": "string"
          }
        }
      },
      "Permissions": {
        "description": "Permissions Table Schema",
        "allOf": [
          {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "$ref": "#/components/schemas/PermissionsRequestBody"
          }
        ]
      },
      "PermissionsRequestBody": {
        "type": "object",
        "required": [],
        "properties": {
          "permission_name": {
            "type": "string",
            "maxLength": 255
          }
        }
      },
      "Rolepermissions": {
        "description": "Rolepermissions Table Schema",
        "allOf": [
          {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "$ref": "#/components/schemas/RolepermissionsRequestBody"
          }
        ]
      },
      "RolepermissionsRequestBody": {
        "type": "object",
        "required": [
          "role_id",
          "permission_id"
        ],
        "properties": {
          "role_id": {
            "type": "integer",
            "maximum": 2147483647,
            "format": "int32"
          },
          "permission_id": {
            "type": "integer",
            "maximum": 2147483647,
            "format": "int32"
          }
        }
      },
      "Roles": {
        "description": "Roles Table Schema",
        "allOf": [
          {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "$ref": "#/components/schemas/RolesRequestBody"
          }
        ]
      },
      "RolesRequestBody": {
        "type": "object",
        "required": [],
        "properties": {
          "role_name": {
            "type": "string",
            "maxLength": 255
          }
        }
      },
      "Schematypes": {
        "description": "Schematypes Table Schema",
        "allOf": [
          {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "$ref": "#/components/schemas/SchematypesRequestBody"
          }
        ]
      },
      "SchematypesRequestBody": {
        "type": "object",
        "required": [],
        "properties": {
          "varchar_column": {
            "type": "string",
            "maxLength": 255
          },
          "char_column": {
            "type": "string",
            "maxLength": 10
          },
          "int_column": {
            "type": "string",
            "maximum": 2147483647,
            "format": "int32"
          },
          "bigint_column": {
            "type": "string",
            "maximum": 9223372036854776000,
            "format": "int64"
          },
          "decimal_column": {
            "type": "string"
          },
          "float_column": {
            "type": "string"
          },
          "double_column": {
            "type": "string"
          },
          "date_column": {
            "type": "string",
            "format": "date"
          },
          "timestamp_column": {
            "type": "string",
            "format": "date"
          },
          "boolean_column": {
            "type": "string"
          },
          "enum_column": {
            "type": "string",
            "enum": [
              "1",
              "2",
              "3"
            ]
          },
          "text_column": {
            "type": "string"
          },
          "blob_column": {
            "type": "string"
          },
          "json_column": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date"
          },
          "updated_at": {
            "type": "string",
            "format": "date"
          }
        }
      },
      "Test": {
        "description": "Test Table Schema",
        "allOf": [
          {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "$ref": "#/components/schemas/TestRequestBody"
          }
        ]
      },
      "TestRequestBody": {
        "type": "object",
        "required": [],
        "properties": {
          "varchar_column": {
            "type": "string",
            "maxLength": 255
          },
          "char_column": {
            "type": "string",
            "maxLength": 10
          },
          "int_column": {
            "type": "string",
            "maximum": 2147483647,
            "format": "int32"
          },
          "bigint_column": {
            "type": "string",
            "maximum": 9223372036854776000,
            "format": "int64"
          },
          "decimal_column": {
            "type": "string"
          },
          "float_column": {
            "type": "string"
          },
          "double_column": {
            "type": "string"
          },
          "date_column": {
            "type": "string",
            "format": "date"
          },
          "created_at": {
            "type": "string",
            "format": "date"
          },
          "updated_at": {
            "type": "string",
            "format": "date"
          },
          "timestamp_column": {
            "type": "string",
            "format": "date"
          },
          "boolean_column": {
            "type": "string"
          },
          "enum_column": {
            "type": "string",
            "enum": [
              "1",
              "2",
              "3"
            ]
          },
          "text_column": {
            "type": "string"
          },
          "blob_column": {
            "type": "string"
          },
          "json_column": {
            "type": "string"
          },
          "primary_key_column": {
            "type": "string",
            "maximum": 2147483647,
            "format": "int32"
          },
          "unique_column": {
            "type": "string",
            "maxLength": 50
          }
        }
      },
      "Userroles": {
        "description": "Userroles Table Schema",
        "allOf": [
          {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "$ref": "#/components/schemas/UserrolesRequestBody"
          }
        ]
      },
      "UserrolesRequestBody": {
        "type": "object",
        "required": [
          "user_id",
          "role_id"
        ],
        "properties": {
          "user_id": {
            "type": "integer",
            "maximum": 2147483647,
            "format": "int32"
          },
          "role_id": {
            "type": "integer",
            "maximum": 2147483647,
            "format": "int32"
          }
        }
      },
      "Users": {
        "description": "Users Table Schema",
        "allOf": [
          {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "$ref": "#/components/schemas/UsersRequestBody"
          }
        ]
      },
      "UsersRequestBody": {
        "type": "object",
        "required": [],
        "properties": {
          "username": {
            "type": "string",
            "maxLength": 255
          },
          "time": {
            "type": "string",
            "format": "date"
          }
        }
      }
    }
  }
}